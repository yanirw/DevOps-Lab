env: {}

kube-prometheus-stack:
  enabled: true
  crds:
    enabled: true
  prometheusOperator:
    createCustomResource: true
    installCRDs: true
  
  # Common Labels
  commonLabels:
    app.kubernetes.io/part-of: monitoring
    app.kubernetes.io/managed-by: helm

  # Prometheus Configuration
  prometheus:
    enabled: true
    prometheusSpec:
      retention: 15d
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 50Gi
      resources:
        requests:
          cpu: 500m
          memory: 2Gi
        limits:
          cpu: 1000m
          memory: 4Gi
      readinessProbe:
        httpGet:
          path: /-/ready
          port: 9090
        initialDelaySeconds: 30
        timeoutSeconds: 30
      livenessProbe:
        httpGet:
          path: /-/healthy
          port: 9090
        initialDelaySeconds: 30
        timeoutSeconds: 30
      
      # Default rules configuration
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false
      
      # Security context
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000

  grafana:
    enabled: true
    persistence:
      enabled: true
      size: 20Gi
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      mountOptions:
        - nobrl
    
    # Database Configuration
    database:
      type: sqlite3
      path: /var/lib/grafana/grafana.db
      max_idle_conn: 100
      max_open_conn: 100
      conn_max_lifetime: 14400
    
    # SQLite specific settings via environment variables
    extraEnv:
      - name: GF_DATABASE_TYPE
        value: sqlite3
      - name: GF_DATABASE_PATH
        value: /var/lib/grafana/grafana.db
      - name: GF_DATABASE_MAX_IDLE_CONN
        value: "100"
      - name: GF_DATABASE_MAX_OPEN_CONN
        value: "100"
      - name: GF_DATABASE_CONN_MAX_LIFETIME
        value: "14400"
      - name: GF_DATABASE_SQLITE_PRAGMA
        value: "journal_mode=WAL,busy_timeout=500"
      - name: GF_SERVER_ENABLE_GZIP
        value: "true"
      - name: GF_AUTH_ANONYMOUS_ENABLED
        value: "false"
      - name: GF_AUTH_BASIC_ENABLED
        value: "true"
    
    # Security
    securityContext:
      runAsUser: 472
      runAsGroup: 472
      fsGroup: 472
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    
    # Network Policies
    networkPolicy:
      enabled: true
      ingress:
        from:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: monitoring
    
    # Enhanced resources
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi
    
    # Enhanced readiness and liveness probes
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 30
      timeoutSeconds: 30
    livenessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 30
      timeoutSeconds: 30
    
    # Service configuration
    service:
      type: ClusterIP
      port: 3000
      targetPort: 3000
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    
    # GKE Ingress configuration
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "gce"
        kubernetes.io/ingress.global-static-ip-name: "grafana-static-ip"
        networking.gke.io/managed-certificates: "grafana-cert"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - grafana.yanirw.com
      tls: []
    
    # Managed Certificate configuration
    managedCertificate:
      enabled: true
      name: grafana-cert
      domains:
        - grafana.yanirw.com
    
    # Dashboard provisioning
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    
    # Default dashboards
    dashboards:
      default:
        kubernetes-cluster:
          gnetId: 315
          revision: 3
          datasource: Prometheus
        node-exporter:
          gnetId: 1860
          revision: 27
          datasource: Prometheus
        prometheus-stats:
          gnetId: 2
          revision: 2
          datasource: Prometheus

    # Admin configuration
    admin:
      existingSecret: "grafana-admin-credentials"
      userKey: admin-user
      passwordKey: admin-password

  alertmanager:
    enabled: true
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['namespace', 'alertname']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: 'null'
        routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
      receivers:
      - name: 'null'
    persistence:
      enabled: true
      size: 10Gi

    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

  # Default prometheus rules are included
  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      general: true
      k8s: true
      kubeApiserver: true
      kubePrometheusNodeAlerting: true
      kubePrometheusNodeRecording: true
      kubernetesAbsent: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: true
      network: true
      node: true
      prometheus: true
      prometheusOperator: true
      time: true

prometheus-node-exporter:
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

